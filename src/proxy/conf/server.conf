# HTTPS server
server {
  listen 443      ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  server_name  ~^(www\.)?(?<domain>.+)$;
  include certs.conf;
  include tls.conf;
  include headers.conf;
# path to static files 'html' is docker volume
  root html;
  index index.html;
  charset utf-8;
  default_type  "text/html";

location ~* ^/(index|index.html)?$ {
  rewrite ^/?(.*)$ /$domain/home/index break;
  default_type  "text/html; charset=utf-8";
  more_set_headers    "Server: xqerl";
  proxy_pass http://xq;
  # set $prior $args;
  # set $args  'user=$cooked&$prior';
  # try_files $uri @proxy;
}

location ~* ^/([a-z]+)$ {
  rewrite ^/?(.*)$ /$domain/$1/index break;
  default_type  "text/html; charset=utf-8";
  more_set_headers    "Server: xqerl";
  proxy_pass http://xq;
  # set $prior $args;
  # set $args  'user=$cooked&$prior';
  # try_files $uri @proxy;
}


# location ~* ^/tags/([\w]+)$ {
#    rewrite "^/(.+)$" $1.html break;
#    try_files $uri @proxy;
# }

######################
###  STATIC ASSETS ###
######################

### STYLES
#############
# The ngx_http_gzip_static_module module allows sending
# precompressed files with the “.gz”
# filename extension instead of regular files.

location ~* /styles/.+ {
  rewrite "^/(styles)/(\w+)([?\.]{1}\w+)?$" /static-assets/$1/$2.css break;
  more_set_headers  "Content-Type: text/css; charset=utf-8";
  more_set_headers  "X-Content-Type-Options: nosniff";
  add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  expires max;
  gzip off;
  gzip_static  always;
  gunzip on;
  root html/$domain;
}

location ~* /scripts/.+ {
  rewrite "^/(scripts)/(\w+)([?\.]{1}\w+)?$" /static-assets/$1/$2.js break;
  more_set_headers  "Content-Type: application/javascript; charset=utf-8";
  more_set_headers  "Cache-Control: public,max-age=31536000,immutable";
  more_set_headers  "X-Content-Type-Options: nosniff";

  # add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  expires max;
  gzip off;
  gzip_static  always;
  gunzip on;
  root html/$domain;
}

###############################################################################
# ICONS
# anything in the icons dir is served as image/svg+xml
# resource is a gzipped svg so has extension svgz
# url does(should) not need an extension so rewrite creates one (always svgz)
# even if request is for svg
###############################################################################

location ~* /icons/.+ {
  rewrite "^/(icons)/(\w+)([?\.]{1}\w+)?$" /static-assets/$1/$2.svgz break;
  more_set_headers  "Content-Type: image/svg+xml; charset=utf-8";
  more_set_headers  "Cache-Control: public,max-age=31536000,immutable";
  more_set_headers  "X-Content-Type-Options: nosniff";
  # add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  add_header Content-Encoding gzip;
  expires max;
  root html/$domain;
  # log_not_found off;
}

###############################################################################
# IMAGES
# look for images on disk,
# images don't have to have an extension ref. try files
# don't bother to gzip or look for gzip file
# make *browser cache* images with expires set to max into the future
# nginx declaration 'expires max' sets both expires and cache-control headers
# nginx sets 'etag on' automatically, setting both etag and last-modified
###############################################################################

  location / {
    default_type  "text/html; charset=utf-8";
    set $prior $args;
    set $args  'user=$cooked&$prior';
    more_set_headers    "Server: xqerl";
    # proxy_ignore_headers    Set-Cookie;
    # # important! Remember the special inheritance rules for proxy_set_header:
    # # http://nginx.org/ru/docs/http/ngx_http_proxy_module.html#proxy_set_header
    # proxy_set_header        Cookie "";
    proxy_cookie_path / "/; HTTPOnly; Secure";
    # proxy_intercept_errors on;

   error_page 418 = @teapot;
   if ( $args ~ action=set_cookie ) {
     return 418;
    }

    rewrite ^/?(.*)$ /$domain/$1 break;
    # echo $uri;
    # more_clear_input_headers Set-Cookie;
    # # more_set_headers    "Set-Cookie: SID=31d4d96e407aad42;  Domain=gmack.nz; SameSite=Strict" ;
    # rewrite ^/?(.*)$ /$domain/$1 break;
    proxy_pass http://xq;
  }

 location @teapot {
    # set $prior $args;
    # set $args 'user=$cooked&$prior';
    more_set_headers  "Set-Cookie: user=$arg_card;  Domain=gmack.nz; SameSite=Strict" ;
    rewrite ^/?(.*)$ /gmack.nz/$1 break;
    proxy_pass http://xq;
  }
}
