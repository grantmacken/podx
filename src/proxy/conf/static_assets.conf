location = /favicon.ico {
  log_not_found off;
 }


######################
###  STATIC ASSETS ###
######################

################################################################################
### FONTS
# filename extension instead of regular files.
################################################################################
location ~* /fonts/.+ {
  rewrite "^/fonts/(\w+)([?\.]{1}\w+)?$" /fonts/$1.woff2 break;
  more_set_headers  "Content-Type: font/woff2";
  more_set_headers  "X-Content-Type-Options: nosniff";
#  content_by_lua_block {
#    ngx.say( ngx.var['uri'])
#  }
# add_header Strict-Transport-Security max-age=15768000;
# expires max;
  root html;
}

################################################################################
### STYLES
# The ngx_http_gzip_static_module module allows sending
# precompressed files with the “.gz”
# filename extension instead of regular files.
################################################################################
location ~* /styles/.+ {
  rewrite "^/styles/(\w+)([?\.]{1}\w+)?$" /${domain}/styles/$1.css break;
  more_set_headers  "Content-Type: text/css; charset=utf-8";
  more_set_headers  "X-Content-Type-Options: nosniff";
#  content_by_lua_block {
#    ngx.say( ngx.var['uri'])
#  }
# add_header Strict-Transport-Security max-age=15768000;
# expires max;
  add_header Vary Accept-Encoding;
  gzip off;
  gzip_static  always;
  gunzip on; 
  root html;
}
#
################################################################################
# ICONS
# anything in the icons dir is served as image/svg+xml
# resource is a gzipped svg so has extension svgz
# url does(should) not need an extension so rewrite creates one (always svgz)
# even if request is for svg
###############################################################################

location ~* /icons/.+ {
  rewrite "^/icons/(\w+)([?\.]{1}\w+)?$" /icons/$1.svgz break;
  more_set_headers  "Content-Type: image/svg+xml; charset=utf-8";
  more_set_headers  "Cache-Control: public,max-age=31536000,immutable";
  more_set_headers  "X-Content-Type-Options: nosniff";
# add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  add_header Content-Encoding gzip;
  expires max;
  root /opt/proxy/html;
# log_not_found off;
}


# IMAGES
# look for images on disk,
# images don't have to have an extension ref. try files
# don't bother to gzip or look for gzip file
# make *browser cache* images with expires set to max into the future
# nginx declaration 'expires max' sets both expires and cache-control headers
# nginx sets 'etag on' automatically, setting both etag and last-modified
###############################################################################

location ~* /images/\d+/.+ {
  rewrite "^/(images)/(?<imgSize>\d{2,4})/(\w+)([?\.]{1}\w+)?$" /$1/$imgSize/$3 break;
  gzip_static  off;
  # more_set_headers    "Cache-Control: public,max-age=31536000,immutable";
  expires max;
  root html;
  try_files $uri.jpg $uri.png $uri.gif;
  # log_not_found off;
}

# SCRIPTS
#########
# --with-http_gunzip_module
# --with-gzip_static_module

location ~* /scripts {
  rewrite "^/scripts/(\w+)([?\.]{1}\w+)?$" /scripts/$1.js break;
  #default_type text/plain;
  #content_by_lua_block {
  #  ngx.say( ngx.var['uri'])
  #}
  more_set_headers  "Content-Type: application/javascript; charset=utf-8";
  gzip off;
  gzip_static  always;
  gunzip on; 
  root html;
}

